}else{
if(base %in% pyr){
return(pur[round(runif(1,1,2),digits=0)])
}else{
return(pyr[round(runif(1,1,2),digits=0)])
}
}
}
dt[,POS:=get_pos(dt$chrom,sizes)]
dt[,maf:=map_dbl(1:nrow(dt),~{maf=rnorm(1,mean=0.2,sd=0.075);if(maf<0){maf<-maf*-1};if(maf>0.5){maf<-1-maf};return(maf)})]
dt[,`:=`(ID=paste0(dt$chrom,":",dt$pos),
REF=BiocGenerics::as.vector(getSeq(genome,dt$chrom,start=dt$POS,end=dt$POS))
)]
dt
dt[,`:=`(
ALT=map_chr(dt$REF,mut_ref),
QUAL=".",FILETR="PASS",INFO=".",FORMAT="GT"
)]
pyr
sample(pyr,1)
sample(pyr,1)
sample(pyr,1)
sample(pyr,1)
pur<-c("A","G")
sample(c(pyr,pur),1)
sample(c(pyr,pur),1)
sample(c(pyr,pur),1)
sample(c(pyr,pur),1)
sample(c(pyr,pur),1)
sample(c(pyr,pur),1)
mut_ref<-function(base){
pyr<-c("C","T")
pur<-c("A","G")
if(base=="N"){return(sample(c(pyr,pur),1))}
flip<-rbinom(1,3,0.5)
if(flip>1){
if(base %in% pyr){
return(pyr[!pyr %in% base])
}else{
return(pur[!pur %in% base])
}
}else{
if(base %in% pyr){
return(sample(pur,1))
}else{
return(sample(pyr,1))
}
}
}
dt[,`:=`(
ALT=map_chr(dt$REF,mut_ref),
QUAL=".",FILETR="PASS",INFO=".",FORMAT="GT"
)]
dt
ppl
hw_freqs<-map(dt$maf,~{
t(rmultinom(1,length(ppl),c((1-.x)^2,2*.x*(1-.x),.x^2)))
})%>%
{do.call(rbind,.)}
genotypes<-do.call(rbind,
map(1:nrow(hw_freqs),~{
sample(c(rep(0,hw_freqs[.x,1]),rep(1,hw_freqs[.x,2]),rep(2,hw_freqs[.x,3])))
})
)
colnames(genotypes)<-ppl
dt<-cbind(dt,as.data.table(genotypes))
dt
dt[,maf=NULL]
dt[,mafc:=NULL]
dt[,maf:=NULL]
dt
setnames(dt,chrom,"#CHROM")
setnames(dt,c(chrom),c("#CHROM"))
chrom
setnames(dt,c("chrom"),c("#CHROM"))
dt
case_when(
x==0~"0/0",
x==1~"0/1",
x==2~"1/1"
)
rev_encode<-function(x){
case_when(
x==0~"0/0",
x==1~"0/1",
x==2~"1/1"
)
}
rev_encode(dt$i_00001)
ppl
dt[,ppl:=lapply(.SD,rev_encode),.SDcols=ppl]
dt[,..ppl:=lapply(.SD,rev_encode),.SDcols=ppl]
dt[,.paste0(ppl):=lapply(.SD,rev_encode),.SDcols=ppl]
dt[,paste0(ppl):=lapply(.SD,rev_encode),.SDcols=ppl]
dt
write_lines(header,"test.vcf")
fwrite(header,"test.vcf.gz")
header
strsplit(header,"\n")
header<-paste(header,
paste(
paste0("##contig=<ID=",sizes$chrom,",length=",sizes$size,",assembly=hg38,species=\"Homo sapiens\">"),
collapse="\n"),
sep="\n")
seqlengths(genome)[1:22]
names(seqlengths(genome)[1:22])
header<-paste(header,
paste(
paste0("##contig=<ID=",names(seqlengths(genome)[1:22]),",length=",seqlengths(genome)[1:22],",assembly=hg38,species=\"Homo sapiens\">"),
collapse="\n"),
sep="\n")
header
strsplit(header,"\n")
fwrite(strsplit(header),"test.vcf.gz")
fwrite(strsplit(header,"\n"),"test.vcf.gz")
fwrite(dt,file="test.vcf.gz",sep = "\t",append = TRUE)
fwrite(header,"test.vcf.gz")
header
unlist(strsplit(header,"\n"))
unlist(strsplit(header,"\n"))
fwrite(unlist(strsplit(header,"\n")),"test.vcf.gz")
fwrite(strsplit(header,"\n"),"test.vcf.gz")
fwrite(dt,file="test.vcf.gz",sep = "\t",append = TRUE,col.names = TRUE)
strsplit(header,"\n")
fwrite(strsplit(header,"\n"),"test.vcf.gz",quote=FALSE)
fwrite(dt,file="test.vcf.gz",sep = "\t",append = TRUE,col.names = TRUE)
genome <- BSgenome.Hsapiens.UCSC.hg38
header<-paste("##fileformat=VCFv4.2",
paste0("##fileDate=",lubridate::today()),
"##source=mySimpleSims",
'##FORMAT=<ID=GT,Number=1,Type=String,Description=\"Genotype\">',
sep="\n")
dt<-data.table(chrom=paste0("chr",sort(round(runif(500L,1L,22L),digits=0))))
header<-paste(header,
paste(
paste0("##contig=<ID=",names(seqlengths(genome)[1:22]),",length=",seqlengths(genome)[1:22],",assembly=hg38,species=\"Homo sapiens\">"),
collapse="\n"),
sep="\n")
get_pos<-function(chrom,sizes){
map_int(chrom,~{
lim<-seqlengths(genome)[.x]
return(as.integer(round(runif(1L,1L,lim),digits=0)))
})}
mut_ref<-function(base){
pyr<-c("C","T")
pur<-c("A","G")
if(base=="N"){return(sample(c(pyr,pur),1))}
flip<-rbinom(1,3,0.5)
if(flip>1){
if(base %in% pyr){
return(pyr[!pyr %in% base])
}else{
return(pur[!pur %in% base])
}
}else{
if(base %in% pyr){
return(sample(pur,1))
}else{
return(sample(pyr,1))
}
}
}
rev_encode<-function(x){
case_when(
x==0~"0/0",
x==1~"0/1",
x==2~"1/1"
)
}
dt[,POS:=get_pos(dt$chrom,sizes)]
dt[,maf:=map_dbl(1:nrow(dt),~{maf=rnorm(1,mean=0.2,sd=0.075);if(maf<0){maf<-maf*-1};if(maf>0.5){maf<-1-maf};return(maf)})]
dt[,`:=`(ID=paste0(dt$chrom,":",dt$POS),
REF=BiocGenerics::as.vector(getSeq(genome,dt$chrom,start=dt$POS,end=dt$POS))
)]
dt[,`:=`(
ALT=map_chr(dt$REF,mut_ref),
QUAL=".",FILETR="PASS",INFO=".",FORMAT="GT"
)]
ppl<-paste0("i_",sprintf("%05d",1:50))
hw_freqs<-map(dt$maf,~{
t(rmultinom(1,length(ppl),c((1-.x)^2,2*.x*(1-.x),.x^2)))
})%>%
{do.call(rbind,.)}
genotypes<-do.call(rbind,
map(1:nrow(hw_freqs),~{
sample(c(rep(0,hw_freqs[.x,1]),rep(1,hw_freqs[.x,2]),rep(2,hw_freqs[.x,3])))
})
)
colnames(genotypes)<-ppl
dt<-cbind(dt,as.data.table(genotypes))
setnames(dt,c("chrom"),c("#CHROM"))
dt[,paste0(ppl):=lapply(.SD,rev_encode),.SDcols=ppl]
fwrite(strsplit(header,"\n"),"test.vcf.gz",quote=FALSE)
fwrite(dt,file="test.vcf.gz",sep = "\t",append = TRUE,col.names = TRUE)
genome <- BSgenome.Hsapiens.UCSC.hg38
header<-paste("##fileformat=VCFv4.2",
paste0("##fileDate=",lubridate::today()),
"##source=mySimpleSims",
'##FORMAT=<ID=GT,Number=1,Type=String,Description=\"Genotype\">',
sep="\n")
dt<-data.table(chrom=paste0("chr",sort(round(runif(500L,1L,22L),digits=0))))
header<-paste(header,
paste(
paste0("##contig=<ID=",names(seqlengths(genome)[1:22]),",length=",seqlengths(genome)[1:22],",assembly=hg38,species=\"Homo sapiens\">"),
collapse="\n"),
sep="\n")
get_pos<-function(chrom,sizes){
map_int(chrom,~{
lim<-seqlengths(genome)[.x]
return(as.integer(round(runif(1L,1L,lim),digits=0)))
})}
mut_ref<-function(base){
pyr<-c("C","T")
pur<-c("A","G")
if(base=="N"){return(sample(c(pyr,pur),1))}
flip<-rbinom(1,3,0.5)
if(flip>1){
if(base %in% pyr){
return(pyr[!pyr %in% base])
}else{
return(pur[!pur %in% base])
}
}else{
if(base %in% pyr){
return(sample(pur,1))
}else{
return(sample(pyr,1))
}
}
}
rev_encode<-function(x){
case_when(
x==0~"0/0",
x==1~"0/1",
x==2~"1/1"
)
}
dt[,POS:=get_pos(dt$chrom,sizes)]
dt[,maf:=map_dbl(1:nrow(dt),~{maf=rnorm(1,mean=0.2,sd=0.075);if(maf<0){maf<-maf*-1};if(maf>0.5){maf<-1-maf};return(maf)})]
dt[,`:=`(ID=paste0(dt$chrom,":",dt$POS),
REF=BiocGenerics::as.vector(getSeq(genome,dt$chrom,start=dt$POS,end=dt$POS))
)]
dt[,`:=`(
ALT=map_chr(dt$REF,mut_ref),
QUAL=".",FILETR="PASS",INFO=".",FORMAT="GT"
)]
ppl<-paste0("i_",sprintf("%05d",1:50))
hw_freqs<-map(dt$maf,~{
t(rmultinom(1,length(ppl),c((1-.x)^2,2*.x*(1-.x),.x^2)))
})%>%
{do.call(rbind,.)}
genotypes<-do.call(rbind,
map(1:nrow(hw_freqs),~{
sample(c(rep(0,hw_freqs[.x,1]),rep(1,hw_freqs[.x,2]),rep(2,hw_freqs[.x,3])))
})
)
colnames(genotypes)<-ppl
dt<-cbind(dt,as.data.table(genotypes))
setnames(dt,c("chrom"),c("#CHROM"))
dt[,maf:=NULL]
dt[,paste0(ppl):=lapply(.SD,rev_encode),.SDcols=ppl]
fwrite(strsplit(header,"\n"),"test.vcf.gz",quote=FALSE)
fwrite(dt,file="test.vcf.gz",sep = "\t",append = TRUE,col.names = TRUE)
rbinom(1,3,0.5)
rbinom(20,3,0.5)
rbinom(20,2,0.5)
rbinom(20,2,0.5)%>%table
rbinom(20,2,2/3)%>%table
rbinom(20,2,1/3)%>%table
rbinom(20,2,0.5)%>%table
rbinom(20,2,0.5)%>%table
rbinom(20,2,0.5)%>%table
rbinom(20,2,0.5)%>%table
rbinom(20,2,0.5)%>%table
rbinom(20,5,0.5)%>%table
rbinom(20,5,0.5)%>%table
rbinom(20,5,0.5)%>%table
rbinom(20,5,0.5)%>%table
rbinom(20,5,1/6)%>%table
rbinom(20,5,1/6)%>%table
rbinom(20,5,1/6)%>%table
rbinom(20,5,1/6)%>%table
rbinom(20,5,1/6)%>%table
rbinom(20,5,1/6)%>%table
runif
runif(1)
runif(10)
runif(10)>(1/3)
runif(10)>(1/3)%>%sum
(sum(runif(10)>(1/3))
)
)
(sum(runif(10)>(1/3)))
sum(runif(10)>(1/3))
sum(runif(10)>(1/3))
sum(runif(10)>(1/3))
sum(runif(10)>(1/3))
sum(runif(10)>(1/3))
sum(runif(10)>(1/3))
sum(runif(10)>(1/3))
sum(runif(10)>(1/3))
sum(runif(10)>(1/3))
sum(runif(10)>(1/3))
sum(runif(10)>(1/3))
sum(runif(10)>(1/3))
sum(runif(10)>(1/3))
sum(runif(10)>(1/3))
genome <- BSgenome.Hsapiens.UCSC.hg38
header<-paste("##fileformat=VCFv4.2",
paste0("##fileDate=",lubridate::today()),
"##source=mySimpleSims",
'##FORMAT=<ID=GT,Number=1,Type=String,Description=\"Genotype\">',
sep="\n")
dt<-data.table(chrom=paste0("chr",sort(round(runif(500L,1L,22L),digits=0))))
header<-paste(header,
paste(
paste0("##contig=<ID=",names(seqlengths(genome)[1:22]),",length=",seqlengths(genome)[1:22],",assembly=hg38,species=\"Homo sapiens\">"),
collapse="\n"),
sep="\n")
get_pos<-function(chrom,sizes){
map_int(chrom,~{
lim<-seqlengths(genome)[.x]
return(as.integer(round(runif(1L,1L,lim),digits=0)))
})}
mut_ref<-function(base){
pyr<-c("C","T")
pur<-c("A","G")
if(base=="N"){return(sample(c(pyr,pur),1))}
flip<-runif(1)
if(flip>(1/3)){
if(base %in% pyr){
return(pyr[!pyr %in% base])
}else{
return(pur[!pur %in% base])
}
}else{
if(base %in% pyr){
return(sample(pur,1))
}else{
return(sample(pyr,1))
}
}
}
rev_encode<-function(x){
case_when(
x==0~"0/0",
x==1~"0/1",
x==2~"1/1"
)
}
dt[,POS:=get_pos(dt$chrom,sizes)]
dt[,maf:=map_dbl(1:nrow(dt),~{maf=rnorm(1,mean=0.2,sd=0.075);if(maf<0){maf<-maf*-1};if(maf>0.5){maf<-1-maf};return(maf)})]
dt[,`:=`(ID=paste0(dt$chrom,":",dt$POS),
REF=BiocGenerics::as.vector(getSeq(genome,dt$chrom,start=dt$POS,end=dt$POS))
)]
dt[,`:=`(
ALT=map_chr(dt$REF,mut_ref),
QUAL=".",FILETR="PASS",INFO=".",FORMAT="GT"
)]
ppl<-paste0("i_",sprintf("%05d",1:50))
hw_freqs<-map(dt$maf,~{
t(rmultinom(1,length(ppl),c((1-.x)^2,2*.x*(1-.x),.x^2)))
})%>%
{do.call(rbind,.)}
genotypes<-do.call(rbind,
map(1:nrow(hw_freqs),~{
sample(c(rep(0,hw_freqs[.x,1]),rep(1,hw_freqs[.x,2]),rep(2,hw_freqs[.x,3])))
})
)
colnames(genotypes)<-ppl
dt<-cbind(dt,as.data.table(genotypes))
setnames(dt,c("chrom"),c("#CHROM"))
dt[,maf:=NULL]
dt[,paste0(ppl):=lapply(.SD,rev_encode),.SDcols=ppl]
fwrite(strsplit(header,"\n"),"test.vcf.gz",quote=FALSE)
fwrite(dt,file="test.vcf.gz",sep = "\t",append = TRUE,col.names = TRUE)
num_vars<-5000L
num_ppl<-50000L
num_ppl
typeof(num_ppl)
num_vars<-5000L
num_ppl<-50000L
genome <- BSgenome.Hsapiens.UCSC.hg38
header<-paste("##fileformat=VCFv4.2",
paste0("##fileDate=",lubridate::today()),
"##source=mySimpleSims",
'##FORMAT=<ID=GT,Number=1,Type=String,Description=\"Genotype\">',
sep="\n")
dt<-data.table(chrom=paste0("chr",sort(round(runif(num_vars,1L,22L),digits=0))))
header<-paste(header,
paste(
paste0("##contig=<ID=",names(seqlengths(genome)[1:22]),",length=",seqlengths(genome)[1:22],",assembly=hg38,species=\"Homo sapiens\">"),
collapse="\n"),
sep="\n")
get_pos<-function(chrom,sizes){
map_int(chrom,~{
lim<-seqlengths(genome)[.x]
return(as.integer(round(runif(1L,1L,lim),digits=0)))
})}
mut_ref<-function(base){
pyr<-c("C","T")
pur<-c("A","G")
if(base=="N"){return(sample(c(pyr,pur),1))}
flip<-runif(1)
if(flip>(1/3)){
if(base %in% pyr){
return(pyr[!pyr %in% base])
}else{
return(pur[!pur %in% base])
}
}else{
if(base %in% pyr){
return(sample(pur,1))
}else{
return(sample(pyr,1))
}
}
}
rev_encode<-function(x){
case_when(
x==0~"0/0",
x==1~"0/1",
x==2~"1/1"
)
}
dt[,POS:=get_pos(dt$chrom,sizes)]
dt[,maf:=map_dbl(1:nrow(dt),~{maf=rnorm(1,mean=0.2,sd=0.075);if(maf<0){maf<-maf*-1};if(maf>0.5){maf<-1-maf};return(maf)})]
dt[,`:=`(ID=paste0(dt$chrom,":",dt$POS),
REF=BiocGenerics::as.vector(getSeq(genome,dt$chrom,start=dt$POS,end=dt$POS))
)]
dt[,`:=`(
ALT=map_chr(dt$REF,mut_ref),
QUAL=".",FILETR="PASS",INFO=".",FORMAT="GT"
)]
ppl<-paste0("i_",sprintf("%05d",1:num_ppl))
hw_freqs<-map(dt$maf,~{
t(rmultinom(1,length(ppl),c((1-.x)^2,2*.x*(1-.x),.x^2)))
})%>%
{do.call(rbind,.)}
genotypes<-do.call(rbind,
map(1:nrow(hw_freqs),~{
sample(c(rep(0,hw_freqs[.x,1]),rep(1,hw_freqs[.x,2]),rep(2,hw_freqs[.x,3])))
})
)
colnames(genotypes)<-ppl
dt<-cbind(dt,as.data.table(genotypes))
setnames(dt,c("chrom"),c("#CHROM"))
dt[,maf:=NULL]
dt[,paste0(ppl):=lapply(.SD,rev_encode),.SDcols=ppl]
fwrite(strsplit(header,"\n"),"test.vcf.gz",quote=FALSE)
fwrite(dt,file="test.vcf.gz",sep = "\t",append = TRUE,col.names = TRUE)
devtools::create(".")
usethis::create_package(".",check_names=FALSE)
usethis::create_package(".",check_name=FALSE)
here::dr_here()
usethis::create_package(".",check_name=FALSE)
devtools::as.package(".")
devtools::as.package()
devtools::as.package
usethis::proj_get()
usethis::create_tidy_package(here::here())
usethis::create_tidy_package(here::here(),check_name=FALSE)
usethis::create_tidy_package(here::here())
usethis::create_package(".",check_names=FALSE)
usethis::create_package(here::here(),check_name=FALSE)
usethis::use_package("data.table")
BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38
usethis::use_package("BSgenome.Hsapiens.UCSC.hg38")
usethis::use_package(purrr)
usethis::use_package("purrr")
usethis::use_package("dplyr")
?seqlengths
?do.call
?rbind
usethis::use_package("GenomeInfoDb")
devtools::document()
devtools::document()
devtools::load_all()
simulate_vcf()
devtools::document()
devtools::load_all()
simulate_vcf()
devtools::document()
devtools::load_all()
simulate_vcf()
usethis::use_mit_license()
usethis::use_mit_license(name = "David Jebb")
?get_pos
devtools::document()
?get_pos
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
simulate_vcf(path="my.test.gz")
gert::git_add(".")
gert::git_init()
gert::git_add(".")
gert::git_commit("Initial Commit")
gert::git_push()
gert::git_remote_add("https://github.com/jebbd/sim_vcf.git")
gert::git_push()
unlink("my.test.gz")
gert::git_add(".")
gert::git_commit("clean up")
gert::git_push()
seqlengths
usethis::use_package("BSgenome")
devtools::document()
gert::git_add(".")
gert::git_commit("Add missing BSgenome call")
gert::git_push()
